openapi: 3.0.3
info:
  title: Go Clean Architecture Blog API
  description: |
    A RESTful API for a blog application built with Clean Architecture principles in Go.
    
    ## Features
    - User authentication with JWT tokens
    - Blog post CRUD operations
    - Author-based ownership validation
    - User profile management
    
    ## Authentication
    Most endpoints require JWT authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
  version: 1.0.0
  contact:
    name: API Support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://your-production-url.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and profile management
  - name: Blog Posts
    description: Blog post operations (CRUD)

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - full_name
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: john_doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  minLength: 8
                  format: password
                  example: securepass123
                full_name:
                  type: string
                  maxLength: 100
                  example: John Doe
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate with email/username and password, returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email_or_username
                - password
              properties:
                email_or_username:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: securepass123
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  maxLength: 100
                  example: John Doe Updated
                bio:
                  type: string
                  maxLength: 500
                  example: Software developer and tech enthusiast
                avatar_url:
                  type: string
                  format: uri
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Change the authenticated user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  format: password
                  example: oldpass123
                new_password:
                  type: string
                  format: password
                  minLength: 8
                  example: newpass456
      responses:
        '204':
          description: Password changed successfully
        '400':
          description: Invalid input or incorrect old password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/users/{username}:
    get:
      tags:
        - Authentication
      summary: Get public user profile
      description: Retrieve a user's public profile by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          example: john_doe
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /blogposts:
    get:
      tags:
        - Blog Posts
      summary: Get all blog posts
      description: Retrieve a list of all blog posts (public access)
      responses:
        '200':
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Blog Posts
      summary: Create a new blog post
      description: Create a new blog post (requires authentication)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - title
                - content
              properties:
                id:
                  type: string
                  example: post-123
                title:
                  type: string
                  maxLength: 200
                  example: My First Blog Post
                content:
                  type: string
                  example: This is the content of my blog post...
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /blogposts/{id}:
    get:
      tags:
        - Blog Posts
      summary: Get a blog post by ID
      description: Retrieve a specific blog post by its ID (public access)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: post-123
      responses:
        '200':
          description: Blog post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Blog Posts
      summary: Update a blog post
      description: Update an existing blog post (requires authentication and ownership)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: post-123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  maxLength: 200
                  example: Updated Blog Post Title
                content:
                  type: string
                  example: Updated content...
      responses:
        '200':
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - You can only update your own posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Blog Posts
      summary: Delete a blog post
      description: Delete an existing blog post (requires authentication and ownership)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: post-123
      responses:
        '204':
          description: Blog post deleted successfully
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - You can only delete your own posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/register or /auth/login

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john@example.com
        full_name:
          type: string
          example: John Doe
        bio:
          type: string
          example: Software developer
        avatar_url:
          type: string
          format: uri
          example: https://example.com/avatar.jpg
        created_at:
          type: string
          format: date-time
          example: 2024-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T14:30:00Z
      required:
        - id
        - username
        - email
        - full_name
        - created_at
        - updated_at

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - user
        - token

    BlogPost:
      type: object
      properties:
        id:
          type: string
          example: post-123
        title:
          type: string
          example: My Blog Post Title
        content:
          type: string
          example: This is the content of the blog post...
        author_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        created_at:
          type: string
          format: date-time
          example: 2024-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T14:30:00Z
      required:
        - id
        - title
        - content
        - author_id
        - created_at
        - updated_at

    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials

